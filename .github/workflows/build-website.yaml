on:
  push:
    branches:
      - main # trigger the workflow when changes are pushed on the `main` branch
  schedule:
    - cron: '30 7 * * *' # trigger every day at 00:30 ex 12:30 am
  workflow_dispatch: # allow the ability to trigger the workflow manually
name: Build Agile in Action website

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true # this workflow stops other concurrent workflows from running


#! TODO: Add .nojekyll to target
#! TODO: Add CNAME with agileinaction.com to target

jobs:
  build:
    name: Jekyll build and push
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allows the workflow to write to the target repo
    env:
      WORKSPACE_PATH: /workspaces/ # when the action opens the source dockerfile, use this as the top-level folder
      REPO_NAME: ${{ github.event.repository.name }} # when the action opens the dockerfile, use this as the top-level sub-folder
      GITHUB_PAT: ${{ secrets.JEKYLLNEW_PAT }} # Secret code created from developer settings
      REPO_OWNER: ${{ github.repository_owner }}
      TARGET_REPO: agile-in-action-minima
      BUILD_TEMP_CONTAINER: temp-container
      BUILD_TEMP_IMAGE: temp-image:latest
      SOURCE_WEBSITE_LOCATION: ./public
      TARGET_TEMP_REPO_FOLDER: temp-public

    steps:
      - name: Print environment variables
        run: |
          echo "WORKSPACE_PATH: ${WORKSPACE_PATH}"
          echo "REPO_NAME: ${REPO_NAME}"
          echo "GITHUB_PAT: ${GITHUB_PAT}"
          echo "REPO_OWNER: ${REPO_OWNER}"
          echo "TARGET_REPO: ${TARGET_REPO}"
          echo "BUILD_TEMP_CONTAINER: ${BUILD_TEMP_CONTAINER}"
          echo "BUILD_TEMP_IMAGE: ${BUILD_TEMP_IMAGE}"
          echo "SOURCE_WEBSITE_LOCATION: ${SOURCE_WEBSITE_LOCATION}"
          echo "TARGET_TEMP_REPO_FOLDER: ${TARGET_TEMP_REPO_FOLDER}"

      - name: Checkout source repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx # Build for AMD64 or ARM64
        uses: docker/setup-buildx-action@v3

      - name: Build the source Docker image
        uses: docker/build-push-action@v5 # This workflow uses "build", not "push", despite the name
        with:
          context: .
          file: ./Dockerfile # Open the dockerfile in this GitHub repo
          load: true
          tags: ${{ env.BUILD_TEMP_IMAGE }} # temporary image name and tag
      
      - name: Build the Jekyll image
        run: |
          docker run --name ${{ env.BUILD_TEMP_CONTAINER }} -v ${{ github.workspace }}:${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }} ${{ env.BUILD_TEMP_IMAGE }} /bin/bash -c "
          echo 'Make it okay to run git commands in the source folder'
          git config --global --add safe.directory ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}
          cd ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}
          echo 'Here is a list of the files in ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}'
          ls -la
          echo 'bundle install'
          bundle install
          echo 'bundle update'
          bundle update
          "
      
      - name: Print workflow completion
        run: |
          echo "Workflow complete"



## How to install this workflow
#   This workflow will copy the Jekyll website from this repo to another.
#   To do so, you will need a Personal Access Token.
#   If you have not already created a token, then follow these steps:
#
#   1. Place this file in the root of your Jekyll repo /.github/workflows
#   2. Create a new personal access token (PAT) in GitHub
#       Github->Your account->Setttings->Developer settings->
#       Personal access tokens (old)->"JEKYLNEW_PAT" (or something similar)
#       Select: "Repo" (all items) and "Workflow"
#       Note: If you are forced to use the new token, allow access to the 
#             source and target repos and use the same settings as defined above
#   3. Copy the generated token to your clipboard
#   4. Add the the token to your source repo
#       Github->Repositories->[your repo]->Settings->
#       Secrets->Actions->New repository secret->
#       Name: same as the PAT (ex JEKYLLNEW_PAT)
#       Value: Paste the generated token into the value
